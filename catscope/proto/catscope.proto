syntax = "proto3";

option go_package = "github.com/noncepad/solpipe-market/go/proto/catscope";

package catscope;

service Tree {
  // just get a single request
  rpc Get(SingleRequest) returns (Notification) {}
  // receive requested notifications and chain state updates
  rpc GetTreeByPubkey(TreeRequest) returns (TreeResponse) {}
  rpc Stream(stream StreamRequest) returns (stream StreamResponse) {} rpc OnSol(SolRequest) returns (stream SolResponse) {}
  rpc OnToken(TokenRequest) returns (stream TokenResponse) {}
  rpc OnSlot(SlotRequest) returns (stream SlotResponse) {}
}

message Id { bytes id = 1; }

message SlotRequest { Commitment commitment = 1; }

message SlotResponse { uint64 slot = 1; }

enum Commitment {
  PROCESSED = 0;
  CONFIRMED = 1;
  FINALIZED = 2;
}

message TreeRequest { bytes id = 1; }

message TreeResponse {
  bytes tree_id = 1;
  repeated uint64 node_id = 2; // id from child to root
}

message SolRequest { bytes id = 1; }

message SolResponse { uint64 balance = 1; }

message TokenRequest {
  oneof request {
    TokenById by_id = 1;
    TokenByOwner by_owner = 2;
    TokenByOwnerAndMint by_owner_and_mint = 3;
  }
}

message TokenById { bytes id = 1; }

message TokenByOwner { bytes owner = 1; }

message TokenByOwnerAndMint {
  bytes owner = 1;
  bytes mint = 2;
}

message TokenResponse { repeated TokenBalance balance = 1; }

message TokenBalance {
  bytes id = 1;
  bytes owner = 2;
  bytes mint = 3;
  uint64 balance = 4;
}

message StreamRequest {
  oneof data {
    NotificationRequest notification_request = 1;
    NotificationFilter filter = 2;
  }
}

message StreamResponse {
  oneof data {
    Notification notification = 1;
    TreeNotFound tree =
        2; // indicates that the tree is empty; root account does not exist
  }
}

message NotificationFilter {
  uint32 filter_id = 1;
  uint32 max_depth = 2;
  repeated uint32 id = 3;
}

message SingleRequest {
  NotificationRequest notification_request = 1;
  uint32 max_depth = 2;
}

message NotificationRequest {
  bytes tree_root_id = 1;
  uint64 last_tx_id = 2;
  repeated uint32 id = 4;
}

message Notification {
  bytes tree_root_id = 1;
  repeated Node change = 2;
  repeated DeleteWithTxid delete = 3;
  repeated PayloadUpdate update = 4;
}

message PayloadUpdate {
  uint32 id = 1;
  uint64 last_tx_id = 2;
  bytes payload = 3;
}

message DeleteWithTxid {
  uint32 id = 1;
  uint64 tx_id = 2;
  bytes pubkey = 3;
}

message Node {
  uint64 last_tx_id = 1;
  repeated uint32 id = 2;
  repeated uint32 children = 3;
}

message TreeNotFound { bytes tree_id = 1; }

