syntax = "proto3";

option go_package = "github.com/noncepad/solpipe-market/go/proto/catscope";

package catscopestate;

message Empty {}

message GetRequest { repeated AccountId list_id = 1; }
message GetResponse { repeated Account list_account = 1; }

message AccountId {
  oneof id {
    uint64 node_id = 1;
    bytes pubkey = 2;
  }
}

message Account {
  bytes header = 1;
  bytes data = 2;
  repeated Edge list_edge_add = 3;
  repeated Edge list_edge_delete = 4;
  repeated Edge list_edge_keep = 5;
}

message SubscriptionRequest {
  AccountId root = 1;
  uint32 filter_weight = 2;
  uint32 depth = 3;
  uint64 last_slot = 4;
}
message ChainUpdate {
  oneof update {
    Slot slot = 1;
    bytes blockhash = 2;
  }
}

message Slot {
  uint64 slot = 1;
  uint32 status = 2;
}

message Edge{
  uint64 from = 1;
  uint64 to = 2;
  uint32 weight = 3;
}

message SubscriptionResponse {
  uint64 slot = 1;
  repeated Account list_account = 2;
}

message RentRequest { uint64 size = 1; }
message RentResponse { uint64 size = 1; }

service Graph {
  // Do graph subset subscritptions. Cannot have system program account or token account as root.
  rpc Get(GetRequest) returns (GetResponse);
  rpc Subscribe(stream SubscriptionRequest) returns (stream SubscriptionResponse);
  // Get blockhash and slot+status updates.
  rpc Chain(Empty) returns (stream ChainUpdate);
  rpc RentExemption(RentRequest) returns (RentResponse);
}


message ShooterSubscribeRequest{
  oneof payload{
    uint64 bloomfilter = 1;
    string address = 2;
  }
}
message ShooterSubscribeResponse{
  bytes hmac_secret = 1;
}
service Shooter{
  // Receive account updates via UDP packets. Send the address first or the stream will be disconnected.
  rpc Subscribe(stream ShooterSubscribeRequest) returns (stream ShooterSubscribeResponse);
}


