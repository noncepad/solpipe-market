// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: jsonrpc.proto

package solanajsonrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	JsonRpc_Get_FullMethodName  = "/solanajsonrpc.JsonRpc/Get"
	JsonRpc_Post_FullMethodName = "/solanajsonrpc.JsonRpc/Post"
)

// JsonRpcClient is the client API for JsonRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JsonRpcClient interface {
	Get(ctx context.Context, in *Header, opts ...grpc.CallOption) (JsonRpc_GetClient, error)
	Post(ctx context.Context, opts ...grpc.CallOption) (JsonRpc_PostClient, error)
}

type jsonRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewJsonRpcClient(cc grpc.ClientConnInterface) JsonRpcClient {
	return &jsonRpcClient{cc}
}

func (c *jsonRpcClient) Get(ctx context.Context, in *Header, opts ...grpc.CallOption) (JsonRpc_GetClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &JsonRpc_ServiceDesc.Streams[0], JsonRpc_Get_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &jsonRpcGetClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JsonRpc_GetClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type jsonRpcGetClient struct {
	grpc.ClientStream
}

func (x *jsonRpcGetClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jsonRpcClient) Post(ctx context.Context, opts ...grpc.CallOption) (JsonRpc_PostClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &JsonRpc_ServiceDesc.Streams[1], JsonRpc_Post_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &jsonRpcPostClient{ClientStream: stream}
	return x, nil
}

type JsonRpc_PostClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type jsonRpcPostClient struct {
	grpc.ClientStream
}

func (x *jsonRpcPostClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *jsonRpcPostClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JsonRpcServer is the server API for JsonRpc service.
// All implementations must embed UnimplementedJsonRpcServer
// for forward compatibility
type JsonRpcServer interface {
	Get(*Header, JsonRpc_GetServer) error
	Post(JsonRpc_PostServer) error
	mustEmbedUnimplementedJsonRpcServer()
}

// UnimplementedJsonRpcServer must be embedded to have forward compatible implementations.
type UnimplementedJsonRpcServer struct {
}

func (UnimplementedJsonRpcServer) Get(*Header, JsonRpc_GetServer) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedJsonRpcServer) Post(JsonRpc_PostServer) error {
	return status.Errorf(codes.Unimplemented, "method Post not implemented")
}
func (UnimplementedJsonRpcServer) mustEmbedUnimplementedJsonRpcServer() {}

// UnsafeJsonRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JsonRpcServer will
// result in compilation errors.
type UnsafeJsonRpcServer interface {
	mustEmbedUnimplementedJsonRpcServer()
}

func RegisterJsonRpcServer(s grpc.ServiceRegistrar, srv JsonRpcServer) {
	s.RegisterService(&JsonRpc_ServiceDesc, srv)
}

func _JsonRpc_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Header)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JsonRpcServer).Get(m, &jsonRpcGetServer{ServerStream: stream})
}

type JsonRpc_GetServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type jsonRpcGetServer struct {
	grpc.ServerStream
}

func (x *jsonRpcGetServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _JsonRpc_Post_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JsonRpcServer).Post(&jsonRpcPostServer{ServerStream: stream})
}

type JsonRpc_PostServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type jsonRpcPostServer struct {
	grpc.ServerStream
}

func (x *jsonRpcPostServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *jsonRpcPostServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JsonRpc_ServiceDesc is the grpc.ServiceDesc for JsonRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JsonRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "solanajsonrpc.JsonRpc",
	HandlerType: (*JsonRpcServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _JsonRpc_Get_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Post",
			Handler:       _JsonRpc_Post_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "jsonrpc.proto",
}
