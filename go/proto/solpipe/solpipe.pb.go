// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.21.12
// source: solpipe.proto

package solpipe

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Commitment int32

const (
	Commitment_PROCESSED Commitment = 0
	Commitment_CONFIRMED Commitment = 1
	Commitment_FINALIZED Commitment = 2
)

// Enum value maps for Commitment.
var (
	Commitment_name = map[int32]string{
		0: "PROCESSED",
		1: "CONFIRMED",
		2: "FINALIZED",
	}
	Commitment_value = map[string]int32{
		"PROCESSED": 0,
		"CONFIRMED": 1,
		"FINALIZED": 2,
	}
)

func (x Commitment) Enum() *Commitment {
	p := new(Commitment)
	*p = x
	return p
}

func (x Commitment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Commitment) Descriptor() protoreflect.EnumDescriptor {
	return file_solpipe_proto_enumTypes[0].Descriptor()
}

func (Commitment) Type() protoreflect.EnumType {
	return &file_solpipe_proto_enumTypes[0]
}

func (x Commitment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Commitment.Descriptor instead.
func (Commitment) EnumDescriptor() ([]byte, []int) {
	return file_solpipe_proto_rawDescGZIP(), []int{0}
}

type SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Search []*TreeSearch `protobuf:"bytes,1,rep,name=search,proto3" json:"search,omitempty"`
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solpipe_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_solpipe_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_solpipe_proto_rawDescGZIP(), []int{0}
}

func (x *SearchRequest) GetSearch() []*TreeSearch {
	if x != nil {
		return x.Search
	}
	return nil
}

type TreeId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TreeId) Reset() {
	*x = TreeId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solpipe_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeId) ProtoMessage() {}

func (x *TreeId) ProtoReflect() protoreflect.Message {
	mi := &file_solpipe_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeId.ProtoReflect.Descriptor instead.
func (*TreeId) Descriptor() ([]byte, []int) {
	return file_solpipe_proto_rawDescGZIP(), []int{1}
}

func (x *TreeId) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type TreeSearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Parameter:
	//
	//	*TreeSearch_Text
	//	*TreeSearch_Flag
	Parameter isTreeSearch_Parameter `protobuf_oneof:"parameter"`
}

func (x *TreeSearch) Reset() {
	*x = TreeSearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solpipe_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeSearch) ProtoMessage() {}

func (x *TreeSearch) ProtoReflect() protoreflect.Message {
	mi := &file_solpipe_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeSearch.ProtoReflect.Descriptor instead.
func (*TreeSearch) Descriptor() ([]byte, []int) {
	return file_solpipe_proto_rawDescGZIP(), []int{2}
}

func (m *TreeSearch) GetParameter() isTreeSearch_Parameter {
	if m != nil {
		return m.Parameter
	}
	return nil
}

func (x *TreeSearch) GetText() *TreeSearchByText {
	if x, ok := x.GetParameter().(*TreeSearch_Text); ok {
		return x.Text
	}
	return nil
}

func (x *TreeSearch) GetFlag() *TreeSearchByFlags {
	if x, ok := x.GetParameter().(*TreeSearch_Flag); ok {
		return x.Flag
	}
	return nil
}

type isTreeSearch_Parameter interface {
	isTreeSearch_Parameter()
}

type TreeSearch_Text struct {
	Text *TreeSearchByText `protobuf:"bytes,1,opt,name=text,proto3,oneof"`
}

type TreeSearch_Flag struct {
	Flag *TreeSearchByFlags `protobuf:"bytes,2,opt,name=flag,proto3,oneof"`
}

func (*TreeSearch_Text) isTreeSearch_Parameter() {}

func (*TreeSearch_Flag) isTreeSearch_Parameter() {}

type TreeSearchByText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *TreeSearchByText) Reset() {
	*x = TreeSearchByText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solpipe_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeSearchByText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeSearchByText) ProtoMessage() {}

func (x *TreeSearchByText) ProtoReflect() protoreflect.Message {
	mi := &file_solpipe_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeSearchByText.ProtoReflect.Descriptor instead.
func (*TreeSearchByText) Descriptor() ([]byte, []int) {
	return file_solpipe_proto_rawDescGZIP(), []int{3}
}

func (x *TreeSearchByText) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type TreeSearchByFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags []byte `protobuf:"bytes,1,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (x *TreeSearchByFlags) Reset() {
	*x = TreeSearchByFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solpipe_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeSearchByFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeSearchByFlags) ProtoMessage() {}

func (x *TreeSearchByFlags) ProtoReflect() protoreflect.Message {
	mi := &file_solpipe_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeSearchByFlags.ProtoReflect.Descriptor instead.
func (*TreeSearchByFlags) Descriptor() ([]byte, []int) {
	return file_solpipe_proto_rawDescGZIP(), []int{4}
}

func (x *TreeSearchByFlags) GetFlags() []byte {
	if x != nil {
		return x.Flags
	}
	return nil
}

type SlotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commitment Commitment `protobuf:"varint,1,opt,name=commitment,proto3,enum=solpipestate.Commitment" json:"commitment,omitempty"`
}

func (x *SlotRequest) Reset() {
	*x = SlotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solpipe_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlotRequest) ProtoMessage() {}

func (x *SlotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_solpipe_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlotRequest.ProtoReflect.Descriptor instead.
func (*SlotRequest) Descriptor() ([]byte, []int) {
	return file_solpipe_proto_rawDescGZIP(), []int{5}
}

func (x *SlotRequest) GetCommitment() Commitment {
	if x != nil {
		return x.Commitment
	}
	return Commitment_PROCESSED
}

type SlotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot uint64 `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
}

func (x *SlotResponse) Reset() {
	*x = SlotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solpipe_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlotResponse) ProtoMessage() {}

func (x *SlotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_solpipe_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlotResponse.ProtoReflect.Descriptor instead.
func (*SlotResponse) Descriptor() ([]byte, []int) {
	return file_solpipe_proto_rawDescGZIP(), []int{6}
}

func (x *SlotResponse) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

type TreeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TreeRequest) Reset() {
	*x = TreeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solpipe_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeRequest) ProtoMessage() {}

func (x *TreeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_solpipe_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeRequest.ProtoReflect.Descriptor instead.
func (*TreeRequest) Descriptor() ([]byte, []int) {
	return file_solpipe_proto_rawDescGZIP(), []int{7}
}

func (x *TreeRequest) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type TreeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreeId []byte   `protobuf:"bytes,1,opt,name=tree_id,json=treeId,proto3" json:"tree_id,omitempty"`
	NodeId []uint32 `protobuf:"varint,2,rep,packed,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"` // id from child to root
}

func (x *TreeResponse) Reset() {
	*x = TreeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solpipe_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeResponse) ProtoMessage() {}

func (x *TreeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_solpipe_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeResponse.ProtoReflect.Descriptor instead.
func (*TreeResponse) Descriptor() ([]byte, []int) {
	return file_solpipe_proto_rawDescGZIP(), []int{8}
}

func (x *TreeResponse) GetTreeId() []byte {
	if x != nil {
		return x.TreeId
	}
	return nil
}

func (x *TreeResponse) GetNodeId() []uint32 {
	if x != nil {
		return x.NodeId
	}
	return nil
}

type SolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SolRequest) Reset() {
	*x = SolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solpipe_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolRequest) ProtoMessage() {}

func (x *SolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_solpipe_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolRequest.ProtoReflect.Descriptor instead.
func (*SolRequest) Descriptor() ([]byte, []int) {
	return file_solpipe_proto_rawDescGZIP(), []int{9}
}

func (x *SolRequest) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type SolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance uint64 `protobuf:"varint,1,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *SolResponse) Reset() {
	*x = SolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solpipe_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolResponse) ProtoMessage() {}

func (x *SolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_solpipe_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolResponse.ProtoReflect.Descriptor instead.
func (*SolResponse) Descriptor() ([]byte, []int) {
	return file_solpipe_proto_rawDescGZIP(), []int{10}
}

func (x *SolResponse) GetBalance() uint64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type TokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*TokenRequest_ById
	//	*TokenRequest_ByOwner
	//	*TokenRequest_ByOwnerAndMint
	Request isTokenRequest_Request `protobuf_oneof:"request"`
}

func (x *TokenRequest) Reset() {
	*x = TokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solpipe_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenRequest) ProtoMessage() {}

func (x *TokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_solpipe_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenRequest.ProtoReflect.Descriptor instead.
func (*TokenRequest) Descriptor() ([]byte, []int) {
	return file_solpipe_proto_rawDescGZIP(), []int{11}
}

func (m *TokenRequest) GetRequest() isTokenRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *TokenRequest) GetById() *TokenById {
	if x, ok := x.GetRequest().(*TokenRequest_ById); ok {
		return x.ById
	}
	return nil
}

func (x *TokenRequest) GetByOwner() *TokenByOwner {
	if x, ok := x.GetRequest().(*TokenRequest_ByOwner); ok {
		return x.ByOwner
	}
	return nil
}

func (x *TokenRequest) GetByOwnerAndMint() *TokenByOwnerAndMint {
	if x, ok := x.GetRequest().(*TokenRequest_ByOwnerAndMint); ok {
		return x.ByOwnerAndMint
	}
	return nil
}

type isTokenRequest_Request interface {
	isTokenRequest_Request()
}

type TokenRequest_ById struct {
	ById *TokenById `protobuf:"bytes,1,opt,name=by_id,json=byId,proto3,oneof"`
}

type TokenRequest_ByOwner struct {
	ByOwner *TokenByOwner `protobuf:"bytes,2,opt,name=by_owner,json=byOwner,proto3,oneof"`
}

type TokenRequest_ByOwnerAndMint struct {
	ByOwnerAndMint *TokenByOwnerAndMint `protobuf:"bytes,3,opt,name=by_owner_and_mint,json=byOwnerAndMint,proto3,oneof"`
}

func (*TokenRequest_ById) isTokenRequest_Request() {}

func (*TokenRequest_ByOwner) isTokenRequest_Request() {}

func (*TokenRequest_ByOwnerAndMint) isTokenRequest_Request() {}

type TokenById struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TokenById) Reset() {
	*x = TokenById{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solpipe_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenById) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenById) ProtoMessage() {}

func (x *TokenById) ProtoReflect() protoreflect.Message {
	mi := &file_solpipe_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenById.ProtoReflect.Descriptor instead.
func (*TokenById) Descriptor() ([]byte, []int) {
	return file_solpipe_proto_rawDescGZIP(), []int{12}
}

func (x *TokenById) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type TokenByOwner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner []byte `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *TokenByOwner) Reset() {
	*x = TokenByOwner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solpipe_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenByOwner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenByOwner) ProtoMessage() {}

func (x *TokenByOwner) ProtoReflect() protoreflect.Message {
	mi := &file_solpipe_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenByOwner.ProtoReflect.Descriptor instead.
func (*TokenByOwner) Descriptor() ([]byte, []int) {
	return file_solpipe_proto_rawDescGZIP(), []int{13}
}

func (x *TokenByOwner) GetOwner() []byte {
	if x != nil {
		return x.Owner
	}
	return nil
}

type TokenByOwnerAndMint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner []byte `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Mint  []byte `protobuf:"bytes,2,opt,name=mint,proto3" json:"mint,omitempty"`
}

func (x *TokenByOwnerAndMint) Reset() {
	*x = TokenByOwnerAndMint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solpipe_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenByOwnerAndMint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenByOwnerAndMint) ProtoMessage() {}

func (x *TokenByOwnerAndMint) ProtoReflect() protoreflect.Message {
	mi := &file_solpipe_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenByOwnerAndMint.ProtoReflect.Descriptor instead.
func (*TokenByOwnerAndMint) Descriptor() ([]byte, []int) {
	return file_solpipe_proto_rawDescGZIP(), []int{14}
}

func (x *TokenByOwnerAndMint) GetOwner() []byte {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *TokenByOwnerAndMint) GetMint() []byte {
	if x != nil {
		return x.Mint
	}
	return nil
}

type TokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance []*TokenBalance `protobuf:"bytes,1,rep,name=balance,proto3" json:"balance,omitempty"`
}

func (x *TokenResponse) Reset() {
	*x = TokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solpipe_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenResponse) ProtoMessage() {}

func (x *TokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_solpipe_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenResponse.ProtoReflect.Descriptor instead.
func (*TokenResponse) Descriptor() ([]byte, []int) {
	return file_solpipe_proto_rawDescGZIP(), []int{15}
}

func (x *TokenResponse) GetBalance() []*TokenBalance {
	if x != nil {
		return x.Balance
	}
	return nil
}

type TokenBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Owner   []byte `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Mint    []byte `protobuf:"bytes,3,opt,name=mint,proto3" json:"mint,omitempty"`
	Balance uint64 `protobuf:"varint,4,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *TokenBalance) Reset() {
	*x = TokenBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solpipe_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenBalance) ProtoMessage() {}

func (x *TokenBalance) ProtoReflect() protoreflect.Message {
	mi := &file_solpipe_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenBalance.ProtoReflect.Descriptor instead.
func (*TokenBalance) Descriptor() ([]byte, []int) {
	return file_solpipe_proto_rawDescGZIP(), []int{16}
}

func (x *TokenBalance) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TokenBalance) GetOwner() []byte {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *TokenBalance) GetMint() []byte {
	if x != nil {
		return x.Mint
	}
	return nil
}

func (x *TokenBalance) GetBalance() uint64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type StreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//
	//	*StreamRequest_NotificationRequest
	//	*StreamRequest_Filter
	Data isStreamRequest_Data `protobuf_oneof:"data"`
}

func (x *StreamRequest) Reset() {
	*x = StreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solpipe_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRequest) ProtoMessage() {}

func (x *StreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_solpipe_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRequest.ProtoReflect.Descriptor instead.
func (*StreamRequest) Descriptor() ([]byte, []int) {
	return file_solpipe_proto_rawDescGZIP(), []int{17}
}

func (m *StreamRequest) GetData() isStreamRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *StreamRequest) GetNotificationRequest() *NotificationRequest {
	if x, ok := x.GetData().(*StreamRequest_NotificationRequest); ok {
		return x.NotificationRequest
	}
	return nil
}

func (x *StreamRequest) GetFilter() *NotificationFilter {
	if x, ok := x.GetData().(*StreamRequest_Filter); ok {
		return x.Filter
	}
	return nil
}

type isStreamRequest_Data interface {
	isStreamRequest_Data()
}

type StreamRequest_NotificationRequest struct {
	NotificationRequest *NotificationRequest `protobuf:"bytes,1,opt,name=notification_request,json=notificationRequest,proto3,oneof"`
}

type StreamRequest_Filter struct {
	Filter *NotificationFilter `protobuf:"bytes,2,opt,name=filter,proto3,oneof"`
}

func (*StreamRequest_NotificationRequest) isStreamRequest_Data() {}

func (*StreamRequest_Filter) isStreamRequest_Data() {}

type StreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//
	//	*StreamResponse_Notification
	//	*StreamResponse_Tree
	Data isStreamResponse_Data `protobuf_oneof:"data"`
}

func (x *StreamResponse) Reset() {
	*x = StreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solpipe_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamResponse) ProtoMessage() {}

func (x *StreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_solpipe_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamResponse.ProtoReflect.Descriptor instead.
func (*StreamResponse) Descriptor() ([]byte, []int) {
	return file_solpipe_proto_rawDescGZIP(), []int{18}
}

func (m *StreamResponse) GetData() isStreamResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *StreamResponse) GetNotification() *Notification {
	if x, ok := x.GetData().(*StreamResponse_Notification); ok {
		return x.Notification
	}
	return nil
}

func (x *StreamResponse) GetTree() *TreeNotFound {
	if x, ok := x.GetData().(*StreamResponse_Tree); ok {
		return x.Tree
	}
	return nil
}

type isStreamResponse_Data interface {
	isStreamResponse_Data()
}

type StreamResponse_Notification struct {
	Notification *Notification `protobuf:"bytes,1,opt,name=notification,proto3,oneof"`
}

type StreamResponse_Tree struct {
	Tree *TreeNotFound `protobuf:"bytes,2,opt,name=tree,proto3,oneof"` // indicates that the tree is empty; root account does not exist
}

func (*StreamResponse_Notification) isStreamResponse_Data() {}

func (*StreamResponse_Tree) isStreamResponse_Data() {}

type NotificationFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterId uint32   `protobuf:"varint,1,opt,name=filter_id,json=filterId,proto3" json:"filter_id,omitempty"`
	MaxDepth uint32   `protobuf:"varint,2,opt,name=max_depth,json=maxDepth,proto3" json:"max_depth,omitempty"`
	Id       []uint32 `protobuf:"varint,3,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (x *NotificationFilter) Reset() {
	*x = NotificationFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solpipe_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationFilter) ProtoMessage() {}

func (x *NotificationFilter) ProtoReflect() protoreflect.Message {
	mi := &file_solpipe_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationFilter.ProtoReflect.Descriptor instead.
func (*NotificationFilter) Descriptor() ([]byte, []int) {
	return file_solpipe_proto_rawDescGZIP(), []int{19}
}

func (x *NotificationFilter) GetFilterId() uint32 {
	if x != nil {
		return x.FilterId
	}
	return 0
}

func (x *NotificationFilter) GetMaxDepth() uint32 {
	if x != nil {
		return x.MaxDepth
	}
	return 0
}

func (x *NotificationFilter) GetId() []uint32 {
	if x != nil {
		return x.Id
	}
	return nil
}

type SingleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotificationRequest *NotificationRequest `protobuf:"bytes,1,opt,name=notification_request,json=notificationRequest,proto3" json:"notification_request,omitempty"`
	MaxDepth            uint32               `protobuf:"varint,2,opt,name=max_depth,json=maxDepth,proto3" json:"max_depth,omitempty"`
}

func (x *SingleRequest) Reset() {
	*x = SingleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solpipe_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleRequest) ProtoMessage() {}

func (x *SingleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_solpipe_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleRequest.ProtoReflect.Descriptor instead.
func (*SingleRequest) Descriptor() ([]byte, []int) {
	return file_solpipe_proto_rawDescGZIP(), []int{20}
}

func (x *SingleRequest) GetNotificationRequest() *NotificationRequest {
	if x != nil {
		return x.NotificationRequest
	}
	return nil
}

func (x *SingleRequest) GetMaxDepth() uint32 {
	if x != nil {
		return x.MaxDepth
	}
	return 0
}

type NotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreeRootId []byte   `protobuf:"bytes,1,opt,name=tree_root_id,json=treeRootId,proto3" json:"tree_root_id,omitempty"`
	LastTxId   uint64   `protobuf:"varint,2,opt,name=last_tx_id,json=lastTxId,proto3" json:"last_tx_id,omitempty"`
	Id         []uint32 `protobuf:"varint,4,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (x *NotificationRequest) Reset() {
	*x = NotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solpipe_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationRequest) ProtoMessage() {}

func (x *NotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_solpipe_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationRequest.ProtoReflect.Descriptor instead.
func (*NotificationRequest) Descriptor() ([]byte, []int) {
	return file_solpipe_proto_rawDescGZIP(), []int{21}
}

func (x *NotificationRequest) GetTreeRootId() []byte {
	if x != nil {
		return x.TreeRootId
	}
	return nil
}

func (x *NotificationRequest) GetLastTxId() uint64 {
	if x != nil {
		return x.LastTxId
	}
	return 0
}

func (x *NotificationRequest) GetId() []uint32 {
	if x != nil {
		return x.Id
	}
	return nil
}

type Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreeRootId []byte            `protobuf:"bytes,1,opt,name=tree_root_id,json=treeRootId,proto3" json:"tree_root_id,omitempty"`
	Change     []*Node           `protobuf:"bytes,2,rep,name=change,proto3" json:"change,omitempty"`
	Delete     []*DeleteWithTxid `protobuf:"bytes,3,rep,name=delete,proto3" json:"delete,omitempty"`
	Update     []*PayloadUpdate  `protobuf:"bytes,4,rep,name=update,proto3" json:"update,omitempty"`
}

func (x *Notification) Reset() {
	*x = Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solpipe_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notification) ProtoMessage() {}

func (x *Notification) ProtoReflect() protoreflect.Message {
	mi := &file_solpipe_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notification.ProtoReflect.Descriptor instead.
func (*Notification) Descriptor() ([]byte, []int) {
	return file_solpipe_proto_rawDescGZIP(), []int{22}
}

func (x *Notification) GetTreeRootId() []byte {
	if x != nil {
		return x.TreeRootId
	}
	return nil
}

func (x *Notification) GetChange() []*Node {
	if x != nil {
		return x.Change
	}
	return nil
}

func (x *Notification) GetDelete() []*DeleteWithTxid {
	if x != nil {
		return x.Delete
	}
	return nil
}

func (x *Notification) GetUpdate() []*PayloadUpdate {
	if x != nil {
		return x.Update
	}
	return nil
}

type PayloadUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	LastTxId uint64 `protobuf:"varint,2,opt,name=last_tx_id,json=lastTxId,proto3" json:"last_tx_id,omitempty"`
	Payload  []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *PayloadUpdate) Reset() {
	*x = PayloadUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solpipe_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayloadUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayloadUpdate) ProtoMessage() {}

func (x *PayloadUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_solpipe_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayloadUpdate.ProtoReflect.Descriptor instead.
func (*PayloadUpdate) Descriptor() ([]byte, []int) {
	return file_solpipe_proto_rawDescGZIP(), []int{23}
}

func (x *PayloadUpdate) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PayloadUpdate) GetLastTxId() uint64 {
	if x != nil {
		return x.LastTxId
	}
	return 0
}

func (x *PayloadUpdate) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type DeleteWithTxid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TxId   uint64 `protobuf:"varint,2,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	Pubkey []byte `protobuf:"bytes,3,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (x *DeleteWithTxid) Reset() {
	*x = DeleteWithTxid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solpipe_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWithTxid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWithTxid) ProtoMessage() {}

func (x *DeleteWithTxid) ProtoReflect() protoreflect.Message {
	mi := &file_solpipe_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWithTxid.ProtoReflect.Descriptor instead.
func (*DeleteWithTxid) Descriptor() ([]byte, []int) {
	return file_solpipe_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteWithTxid) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteWithTxid) GetTxId() uint64 {
	if x != nil {
		return x.TxId
	}
	return 0
}

func (x *DeleteWithTxid) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastTxId uint64   `protobuf:"varint,1,opt,name=last_tx_id,json=lastTxId,proto3" json:"last_tx_id,omitempty"`
	Id       []uint32 `protobuf:"varint,2,rep,packed,name=id,proto3" json:"id,omitempty"`
	Children []uint32 `protobuf:"varint,3,rep,packed,name=children,proto3" json:"children,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solpipe_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_solpipe_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_solpipe_proto_rawDescGZIP(), []int{25}
}

func (x *Node) GetLastTxId() uint64 {
	if x != nil {
		return x.LastTxId
	}
	return 0
}

func (x *Node) GetId() []uint32 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Node) GetChildren() []uint32 {
	if x != nil {
		return x.Children
	}
	return nil
}

type TreeNotFound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreeId []byte `protobuf:"bytes,1,opt,name=tree_id,json=treeId,proto3" json:"tree_id,omitempty"`
}

func (x *TreeNotFound) Reset() {
	*x = TreeNotFound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solpipe_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeNotFound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeNotFound) ProtoMessage() {}

func (x *TreeNotFound) ProtoReflect() protoreflect.Message {
	mi := &file_solpipe_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeNotFound.ProtoReflect.Descriptor instead.
func (*TreeNotFound) Descriptor() ([]byte, []int) {
	return file_solpipe_proto_rawDescGZIP(), []int{26}
}

func (x *TreeNotFound) GetTreeId() []byte {
	if x != nil {
		return x.TreeId
	}
	return nil
}

var File_solpipe_proto protoreflect.FileDescriptor

var file_solpipe_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x6f, 0x6c, 0x70, 0x69, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0c, 0x73, 0x6f, 0x6c, 0x70, 0x69, 0x70, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x41, 0x0a,
	0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30,
	0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x73, 0x6f, 0x6c, 0x70, 0x69, 0x70, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72,
	0x65, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x22, 0x18, 0x0a, 0x06, 0x54, 0x72, 0x65, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x0a, 0x54,
	0x72, 0x65, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6f, 0x6c, 0x70, 0x69, 0x70,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x42, 0x79, 0x54, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x35, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x73, 0x6f, 0x6c, 0x70, 0x69, 0x70, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x65,
	0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x48, 0x00,
	0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x42, 0x0b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x22, 0x28, 0x0a, 0x10, 0x54, 0x72, 0x65, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x42, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x29, 0x0a,
	0x11, 0x54, 0x72, 0x65, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x79, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x47, 0x0a, 0x0b, 0x53, 0x6c, 0x6f, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73, 0x6f,
	0x6c, 0x70, 0x69, 0x70, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x22, 0x0a, 0x0c, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x73, 0x6c, 0x6f, 0x74, 0x22, 0x1d, 0x0a, 0x0b, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x40, 0x0a, 0x0c, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x72, 0x65, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x1c, 0x0a, 0x0a, 0x53, 0x6f, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x27, 0x0a, 0x0b, 0x53, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xd2, 0x01,
	0x0a, 0x0c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x05, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x73, 0x6f, 0x6c, 0x70, 0x69, 0x70, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x48, 0x00, 0x52, 0x04, 0x62, 0x79, 0x49, 0x64, 0x12, 0x37,
	0x0a, 0x08, 0x62, 0x79, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x73, 0x6f, 0x6c, 0x70, 0x69, 0x70, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07,
	0x62, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x11, 0x62, 0x79, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6f, 0x6c, 0x70, 0x69, 0x70, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x6e,
	0x64, 0x4d, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x62, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x41, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x1b, 0x0a, 0x09, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x24, 0x0a, 0x0c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x3f, 0x0a, 0x13, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x22, 0x45, 0x0a, 0x0d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6f, 0x6c, 0x70, 0x69,
	0x70, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x62, 0x0a,
	0x0c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x22, 0xab, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6f, 0x6c, 0x70, 0x69, 0x70, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6f,
	0x6c, 0x70, 0x69, 0x70, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x8c, 0x01, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6f, 0x6c, 0x70, 0x69,
	0x70, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x72, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6f, 0x6c, 0x70, 0x69, 0x70, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x00,
	0x52, 0x04, 0x74, 0x72, 0x65, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5e,
	0x0a, 0x12, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x82,
	0x01, 0x0a, 0x0d, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x54, 0x0a, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x73, 0x6f, 0x6c, 0x70, 0x69, 0x70, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x13, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65,
	0x70, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x44, 0x65,
	0x70, 0x74, 0x68, 0x22, 0x65, 0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x72,
	0x65, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x74, 0x72, 0x65, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x78, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc7, 0x01, 0x0a, 0x0c, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x74,
	0x72, 0x65, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x74, 0x72, 0x65, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x73, 0x6f, 0x6c, 0x70, 0x69, 0x70, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6f, 0x6c, 0x70,
	0x69, 0x70, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x54, 0x78, 0x69, 0x64, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x33, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x73, 0x6f, 0x6c, 0x70, 0x69, 0x70, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x06, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x22, 0x57, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x78,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x54,
	0x78, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x4d, 0x0a,
	0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x54, 0x78, 0x69, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x74, 0x78, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x22, 0x50, 0x0a, 0x04,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x78, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x78,
	0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x27,
	0x0a, 0x0c, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x74, 0x72, 0x65, 0x65, 0x49, 0x64, 0x2a, 0x39, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x02, 0x32, 0xef, 0x03, 0x0a, 0x04, 0x54, 0x72, 0x65, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1b, 0x2e, 0x73, 0x6f, 0x6c, 0x70, 0x69, 0x70, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x73, 0x6f, 0x6c, 0x70, 0x69, 0x70, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x49, 0x64, 0x22, 0x00, 0x30, 0x01, 0x12, 0x40, 0x0a, 0x03,
	0x47, 0x65, 0x74, 0x12, 0x1b, 0x2e, 0x73, 0x6f, 0x6c, 0x70, 0x69, 0x70, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x73, 0x6f, 0x6c, 0x70, 0x69, 0x70, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x4a,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x65, 0x65, 0x42, 0x79, 0x50, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x12, 0x19, 0x2e, 0x73, 0x6f, 0x6c, 0x70, 0x69, 0x70, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73,
	0x6f, 0x6c, 0x70, 0x69, 0x70, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x65, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x06, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x1b, 0x2e, 0x73, 0x6f, 0x6c, 0x70, 0x69, 0x70, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x6f, 0x6c, 0x70, 0x69, 0x70, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x40, 0x0a, 0x05, 0x4f, 0x6e, 0x53, 0x6f, 0x6c, 0x12, 0x18,
	0x2e, 0x73, 0x6f, 0x6c, 0x70, 0x69, 0x70, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x6f, 0x6c, 0x70, 0x69,
	0x70, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x46, 0x0a, 0x07, 0x4f, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1a, 0x2e, 0x73, 0x6f, 0x6c, 0x70, 0x69, 0x70, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x73, 0x6f, 0x6c, 0x70, 0x69, 0x70, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x43, 0x0a, 0x06, 0x4f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x19, 0x2e, 0x73, 0x6f, 0x6c, 0x70,
	0x69, 0x70, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x6f, 0x6c, 0x70, 0x69, 0x70, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x30, 0x01, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x61, 0x64, 0x2f, 0x73, 0x6f, 0x6c, 0x70,
	0x69, 0x70, 0x65, 0x2d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x6f, 0x6c, 0x70, 0x69, 0x70, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_solpipe_proto_rawDescOnce sync.Once
	file_solpipe_proto_rawDescData = file_solpipe_proto_rawDesc
)

func file_solpipe_proto_rawDescGZIP() []byte {
	file_solpipe_proto_rawDescOnce.Do(func() {
		file_solpipe_proto_rawDescData = protoimpl.X.CompressGZIP(file_solpipe_proto_rawDescData)
	})
	return file_solpipe_proto_rawDescData
}

var file_solpipe_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_solpipe_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_solpipe_proto_goTypes = []interface{}{
	(Commitment)(0),             // 0: solpipestate.Commitment
	(*SearchRequest)(nil),       // 1: solpipestate.SearchRequest
	(*TreeId)(nil),              // 2: solpipestate.TreeId
	(*TreeSearch)(nil),          // 3: solpipestate.TreeSearch
	(*TreeSearchByText)(nil),    // 4: solpipestate.TreeSearchByText
	(*TreeSearchByFlags)(nil),   // 5: solpipestate.TreeSearchByFlags
	(*SlotRequest)(nil),         // 6: solpipestate.SlotRequest
	(*SlotResponse)(nil),        // 7: solpipestate.SlotResponse
	(*TreeRequest)(nil),         // 8: solpipestate.TreeRequest
	(*TreeResponse)(nil),        // 9: solpipestate.TreeResponse
	(*SolRequest)(nil),          // 10: solpipestate.SolRequest
	(*SolResponse)(nil),         // 11: solpipestate.SolResponse
	(*TokenRequest)(nil),        // 12: solpipestate.TokenRequest
	(*TokenById)(nil),           // 13: solpipestate.TokenById
	(*TokenByOwner)(nil),        // 14: solpipestate.TokenByOwner
	(*TokenByOwnerAndMint)(nil), // 15: solpipestate.TokenByOwnerAndMint
	(*TokenResponse)(nil),       // 16: solpipestate.TokenResponse
	(*TokenBalance)(nil),        // 17: solpipestate.TokenBalance
	(*StreamRequest)(nil),       // 18: solpipestate.StreamRequest
	(*StreamResponse)(nil),      // 19: solpipestate.StreamResponse
	(*NotificationFilter)(nil),  // 20: solpipestate.NotificationFilter
	(*SingleRequest)(nil),       // 21: solpipestate.SingleRequest
	(*NotificationRequest)(nil), // 22: solpipestate.NotificationRequest
	(*Notification)(nil),        // 23: solpipestate.Notification
	(*PayloadUpdate)(nil),       // 24: solpipestate.PayloadUpdate
	(*DeleteWithTxid)(nil),      // 25: solpipestate.DeleteWithTxid
	(*Node)(nil),                // 26: solpipestate.Node
	(*TreeNotFound)(nil),        // 27: solpipestate.TreeNotFound
}
var file_solpipe_proto_depIdxs = []int32{
	3,  // 0: solpipestate.SearchRequest.search:type_name -> solpipestate.TreeSearch
	4,  // 1: solpipestate.TreeSearch.text:type_name -> solpipestate.TreeSearchByText
	5,  // 2: solpipestate.TreeSearch.flag:type_name -> solpipestate.TreeSearchByFlags
	0,  // 3: solpipestate.SlotRequest.commitment:type_name -> solpipestate.Commitment
	13, // 4: solpipestate.TokenRequest.by_id:type_name -> solpipestate.TokenById
	14, // 5: solpipestate.TokenRequest.by_owner:type_name -> solpipestate.TokenByOwner
	15, // 6: solpipestate.TokenRequest.by_owner_and_mint:type_name -> solpipestate.TokenByOwnerAndMint
	17, // 7: solpipestate.TokenResponse.balance:type_name -> solpipestate.TokenBalance
	22, // 8: solpipestate.StreamRequest.notification_request:type_name -> solpipestate.NotificationRequest
	20, // 9: solpipestate.StreamRequest.filter:type_name -> solpipestate.NotificationFilter
	23, // 10: solpipestate.StreamResponse.notification:type_name -> solpipestate.Notification
	27, // 11: solpipestate.StreamResponse.tree:type_name -> solpipestate.TreeNotFound
	22, // 12: solpipestate.SingleRequest.notification_request:type_name -> solpipestate.NotificationRequest
	26, // 13: solpipestate.Notification.change:type_name -> solpipestate.Node
	25, // 14: solpipestate.Notification.delete:type_name -> solpipestate.DeleteWithTxid
	24, // 15: solpipestate.Notification.update:type_name -> solpipestate.PayloadUpdate
	1,  // 16: solpipestate.Tree.Search:input_type -> solpipestate.SearchRequest
	21, // 17: solpipestate.Tree.Get:input_type -> solpipestate.SingleRequest
	8,  // 18: solpipestate.Tree.GetTreeByPubkey:input_type -> solpipestate.TreeRequest
	18, // 19: solpipestate.Tree.Stream:input_type -> solpipestate.StreamRequest
	10, // 20: solpipestate.Tree.OnSol:input_type -> solpipestate.SolRequest
	12, // 21: solpipestate.Tree.OnToken:input_type -> solpipestate.TokenRequest
	6,  // 22: solpipestate.Tree.OnSlot:input_type -> solpipestate.SlotRequest
	2,  // 23: solpipestate.Tree.Search:output_type -> solpipestate.TreeId
	23, // 24: solpipestate.Tree.Get:output_type -> solpipestate.Notification
	9,  // 25: solpipestate.Tree.GetTreeByPubkey:output_type -> solpipestate.TreeResponse
	19, // 26: solpipestate.Tree.Stream:output_type -> solpipestate.StreamResponse
	11, // 27: solpipestate.Tree.OnSol:output_type -> solpipestate.SolResponse
	16, // 28: solpipestate.Tree.OnToken:output_type -> solpipestate.TokenResponse
	7,  // 29: solpipestate.Tree.OnSlot:output_type -> solpipestate.SlotResponse
	23, // [23:30] is the sub-list for method output_type
	16, // [16:23] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_solpipe_proto_init() }
func file_solpipe_proto_init() {
	if File_solpipe_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_solpipe_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solpipe_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreeId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solpipe_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreeSearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solpipe_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreeSearchByText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solpipe_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreeSearchByFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solpipe_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solpipe_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solpipe_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solpipe_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solpipe_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solpipe_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solpipe_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solpipe_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenById); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solpipe_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenByOwner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solpipe_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenByOwnerAndMint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solpipe_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solpipe_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solpipe_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solpipe_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solpipe_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solpipe_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solpipe_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solpipe_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solpipe_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayloadUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solpipe_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWithTxid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solpipe_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solpipe_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreeNotFound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_solpipe_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*TreeSearch_Text)(nil),
		(*TreeSearch_Flag)(nil),
	}
	file_solpipe_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*TokenRequest_ById)(nil),
		(*TokenRequest_ByOwner)(nil),
		(*TokenRequest_ByOwnerAndMint)(nil),
	}
	file_solpipe_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*StreamRequest_NotificationRequest)(nil),
		(*StreamRequest_Filter)(nil),
	}
	file_solpipe_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*StreamResponse_Notification)(nil),
		(*StreamResponse_Tree)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_solpipe_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_solpipe_proto_goTypes,
		DependencyIndexes: file_solpipe_proto_depIdxs,
		EnumInfos:         file_solpipe_proto_enumTypes,
		MessageInfos:      file_solpipe_proto_msgTypes,
	}.Build()
	File_solpipe_proto = out.File
	file_solpipe_proto_rawDesc = nil
	file_solpipe_proto_goTypes = nil
	file_solpipe_proto_depIdxs = nil
}
