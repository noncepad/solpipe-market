// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: relay.proto

package relay

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Capacity_OnStatus_FullMethodName = "/relay.Capacity/OnStatus"
)

// CapacityClient is the client API for Capacity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CapacityClient interface {
	OnStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CapacityStatus], error)
}

type capacityClient struct {
	cc grpc.ClientConnInterface
}

func NewCapacityClient(cc grpc.ClientConnInterface) CapacityClient {
	return &capacityClient{cc}
}

func (c *capacityClient) OnStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CapacityStatus], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Capacity_ServiceDesc.Streams[0], Capacity_OnStatus_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, CapacityStatus]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Capacity_OnStatusClient = grpc.ServerStreamingClient[CapacityStatus]

// CapacityServer is the server API for Capacity service.
// All implementations must embed UnimplementedCapacityServer
// for forward compatibility.
type CapacityServer interface {
	OnStatus(*Empty, grpc.ServerStreamingServer[CapacityStatus]) error
	mustEmbedUnimplementedCapacityServer()
}

// UnimplementedCapacityServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCapacityServer struct{}

func (UnimplementedCapacityServer) OnStatus(*Empty, grpc.ServerStreamingServer[CapacityStatus]) error {
	return status.Errorf(codes.Unimplemented, "method OnStatus not implemented")
}
func (UnimplementedCapacityServer) mustEmbedUnimplementedCapacityServer() {}
func (UnimplementedCapacityServer) testEmbeddedByValue()                  {}

// UnsafeCapacityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CapacityServer will
// result in compilation errors.
type UnsafeCapacityServer interface {
	mustEmbedUnimplementedCapacityServer()
}

func RegisterCapacityServer(s grpc.ServiceRegistrar, srv CapacityServer) {
	// If the following call pancis, it indicates UnimplementedCapacityServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Capacity_ServiceDesc, srv)
}

func _Capacity_OnStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CapacityServer).OnStatus(m, &grpc.GenericServerStream[Empty, CapacityStatus]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Capacity_OnStatusServer = grpc.ServerStreamingServer[CapacityStatus]

// Capacity_ServiceDesc is the grpc.ServiceDesc for Capacity service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Capacity_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "relay.Capacity",
	HandlerType: (*CapacityServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OnStatus",
			Handler:       _Capacity_OnStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "relay.proto",
}

const (
	Meter_GetStatus_FullMethodName = "/relay.Meter/GetStatus"
	Meter_OnStatus_FullMethodName  = "/relay.Meter/OnStatus"
)

// MeterClient is the client API for Meter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeterClient interface {
	GetStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Usage, error)
	OnStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Usage], error)
}

type meterClient struct {
	cc grpc.ClientConnInterface
}

func NewMeterClient(cc grpc.ClientConnInterface) MeterClient {
	return &meterClient{cc}
}

func (c *meterClient) GetStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Usage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Usage)
	err := c.cc.Invoke(ctx, Meter_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meterClient) OnStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Usage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Meter_ServiceDesc.Streams[0], Meter_OnStatus_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, Usage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Meter_OnStatusClient = grpc.ServerStreamingClient[Usage]

// MeterServer is the server API for Meter service.
// All implementations must embed UnimplementedMeterServer
// for forward compatibility.
type MeterServer interface {
	GetStatus(context.Context, *Empty) (*Usage, error)
	OnStatus(*Empty, grpc.ServerStreamingServer[Usage]) error
	mustEmbedUnimplementedMeterServer()
}

// UnimplementedMeterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMeterServer struct{}

func (UnimplementedMeterServer) GetStatus(context.Context, *Empty) (*Usage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedMeterServer) OnStatus(*Empty, grpc.ServerStreamingServer[Usage]) error {
	return status.Errorf(codes.Unimplemented, "method OnStatus not implemented")
}
func (UnimplementedMeterServer) mustEmbedUnimplementedMeterServer() {}
func (UnimplementedMeterServer) testEmbeddedByValue()               {}

// UnsafeMeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeterServer will
// result in compilation errors.
type UnsafeMeterServer interface {
	mustEmbedUnimplementedMeterServer()
}

func RegisterMeterServer(s grpc.ServiceRegistrar, srv MeterServer) {
	// If the following call pancis, it indicates UnimplementedMeterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Meter_ServiceDesc, srv)
}

func _Meter_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeterServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Meter_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeterServer).GetStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Meter_OnStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MeterServer).OnStatus(m, &grpc.GenericServerStream[Empty, Usage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Meter_OnStatusServer = grpc.ServerStreamingServer[Usage]

// Meter_ServiceDesc is the grpc.ServiceDesc for Meter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Meter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "relay.Meter",
	HandlerType: (*MeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _Meter_GetStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OnStatus",
			Handler:       _Meter_OnStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "relay.proto",
}

const (
	Endpoint_GetClearNetAddress_FullMethodName = "/relay.Endpoint/GetClearNetAddress"
)

// EndpointClient is the client API for Endpoint service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Consumers that purchased bandwidth use this protobuf to send transactions to the staked validator.
// Client=consumers
// Server=staked validator proxy server
type EndpointClient interface {
	// let consumers connect over clearnet
	GetClearNetAddress(ctx context.Context, in *EndpointRequest, opts ...grpc.CallOption) (*EndpointResponse, error)
}

type endpointClient struct {
	cc grpc.ClientConnInterface
}

func NewEndpointClient(cc grpc.ClientConnInterface) EndpointClient {
	return &endpointClient{cc}
}

func (c *endpointClient) GetClearNetAddress(ctx context.Context, in *EndpointRequest, opts ...grpc.CallOption) (*EndpointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EndpointResponse)
	err := c.cc.Invoke(ctx, Endpoint_GetClearNetAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EndpointServer is the server API for Endpoint service.
// All implementations must embed UnimplementedEndpointServer
// for forward compatibility.
//
// Consumers that purchased bandwidth use this protobuf to send transactions to the staked validator.
// Client=consumers
// Server=staked validator proxy server
type EndpointServer interface {
	// let consumers connect over clearnet
	GetClearNetAddress(context.Context, *EndpointRequest) (*EndpointResponse, error)
	mustEmbedUnimplementedEndpointServer()
}

// UnimplementedEndpointServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEndpointServer struct{}

func (UnimplementedEndpointServer) GetClearNetAddress(context.Context, *EndpointRequest) (*EndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClearNetAddress not implemented")
}
func (UnimplementedEndpointServer) mustEmbedUnimplementedEndpointServer() {}
func (UnimplementedEndpointServer) testEmbeddedByValue()                  {}

// UnsafeEndpointServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EndpointServer will
// result in compilation errors.
type UnsafeEndpointServer interface {
	mustEmbedUnimplementedEndpointServer()
}

func RegisterEndpointServer(s grpc.ServiceRegistrar, srv EndpointServer) {
	// If the following call pancis, it indicates UnimplementedEndpointServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Endpoint_ServiceDesc, srv)
}

func _Endpoint_GetClearNetAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServer).GetClearNetAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Endpoint_GetClearNetAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServer).GetClearNetAddress(ctx, req.(*EndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Endpoint_ServiceDesc is the grpc.ServiceDesc for Endpoint service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Endpoint_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "relay.Endpoint",
	HandlerType: (*EndpointServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClearNetAddress",
			Handler:    _Endpoint_GetClearNetAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relay.proto",
}

const (
	Information_Get_FullMethodName = "/relay.Information/Get"
)

// InformationClient is the client API for Information service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InformationClient interface {
	Get(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ApiDescription, error)
}

type informationClient struct {
	cc grpc.ClientConnInterface
}

func NewInformationClient(cc grpc.ClientConnInterface) InformationClient {
	return &informationClient{cc}
}

func (c *informationClient) Get(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ApiDescription, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiDescription)
	err := c.cc.Invoke(ctx, Information_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InformationServer is the server API for Information service.
// All implementations must embed UnimplementedInformationServer
// for forward compatibility.
type InformationServer interface {
	Get(context.Context, *Empty) (*ApiDescription, error)
	mustEmbedUnimplementedInformationServer()
}

// UnimplementedInformationServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInformationServer struct{}

func (UnimplementedInformationServer) Get(context.Context, *Empty) (*ApiDescription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedInformationServer) mustEmbedUnimplementedInformationServer() {}
func (UnimplementedInformationServer) testEmbeddedByValue()                     {}

// UnsafeInformationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InformationServer will
// result in compilation errors.
type UnsafeInformationServer interface {
	mustEmbedUnimplementedInformationServer()
}

func RegisterInformationServer(s grpc.ServiceRegistrar, srv InformationServer) {
	// If the following call pancis, it indicates UnimplementedInformationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Information_ServiceDesc, srv)
}

func _Information_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).Get(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Information_ServiceDesc is the grpc.ServiceDesc for Information service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Information_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "relay.Information",
	HandlerType: (*InformationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Information_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relay.proto",
}
