// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: catscope.proto

package catscope

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Tree_Get_FullMethodName             = "/catscope.Tree/Get"
	Tree_GetTreeByPubkey_FullMethodName = "/catscope.Tree/GetTreeByPubkey"
	Tree_Stream_FullMethodName          = "/catscope.Tree/Stream"
	Tree_OnSol_FullMethodName           = "/catscope.Tree/OnSol"
	Tree_OnToken_FullMethodName         = "/catscope.Tree/OnToken"
	Tree_OnSlot_FullMethodName          = "/catscope.Tree/OnSlot"
)

// TreeClient is the client API for Tree service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TreeClient interface {
	// just get a single request
	Get(ctx context.Context, in *SingleRequest, opts ...grpc.CallOption) (*Notification, error)
	// receive requested notifications and chain state updates
	GetTreeByPubkey(ctx context.Context, in *TreeRequest, opts ...grpc.CallOption) (*TreeResponse, error)
	Stream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamRequest, StreamResponse], error)
	OnSol(ctx context.Context, in *SolRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SolResponse], error)
	OnToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TokenResponse], error)
	OnSlot(ctx context.Context, in *SlotRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SlotResponse], error)
}

type treeClient struct {
	cc grpc.ClientConnInterface
}

func NewTreeClient(cc grpc.ClientConnInterface) TreeClient {
	return &treeClient{cc}
}

func (c *treeClient) Get(ctx context.Context, in *SingleRequest, opts ...grpc.CallOption) (*Notification, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Notification)
	err := c.cc.Invoke(ctx, Tree_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treeClient) GetTreeByPubkey(ctx context.Context, in *TreeRequest, opts ...grpc.CallOption) (*TreeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TreeResponse)
	err := c.cc.Invoke(ctx, Tree_GetTreeByPubkey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treeClient) Stream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamRequest, StreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Tree_ServiceDesc.Streams[0], Tree_Stream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamRequest, StreamResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Tree_StreamClient = grpc.BidiStreamingClient[StreamRequest, StreamResponse]

func (c *treeClient) OnSol(ctx context.Context, in *SolRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SolResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Tree_ServiceDesc.Streams[1], Tree_OnSol_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SolRequest, SolResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Tree_OnSolClient = grpc.ServerStreamingClient[SolResponse]

func (c *treeClient) OnToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TokenResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Tree_ServiceDesc.Streams[2], Tree_OnToken_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TokenRequest, TokenResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Tree_OnTokenClient = grpc.ServerStreamingClient[TokenResponse]

func (c *treeClient) OnSlot(ctx context.Context, in *SlotRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SlotResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Tree_ServiceDesc.Streams[3], Tree_OnSlot_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SlotRequest, SlotResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Tree_OnSlotClient = grpc.ServerStreamingClient[SlotResponse]

// TreeServer is the server API for Tree service.
// All implementations must embed UnimplementedTreeServer
// for forward compatibility.
type TreeServer interface {
	// just get a single request
	Get(context.Context, *SingleRequest) (*Notification, error)
	// receive requested notifications and chain state updates
	GetTreeByPubkey(context.Context, *TreeRequest) (*TreeResponse, error)
	Stream(grpc.BidiStreamingServer[StreamRequest, StreamResponse]) error
	OnSol(*SolRequest, grpc.ServerStreamingServer[SolResponse]) error
	OnToken(*TokenRequest, grpc.ServerStreamingServer[TokenResponse]) error
	OnSlot(*SlotRequest, grpc.ServerStreamingServer[SlotResponse]) error
	mustEmbedUnimplementedTreeServer()
}

// UnimplementedTreeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTreeServer struct{}

func (UnimplementedTreeServer) Get(context.Context, *SingleRequest) (*Notification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTreeServer) GetTreeByPubkey(context.Context, *TreeRequest) (*TreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTreeByPubkey not implemented")
}
func (UnimplementedTreeServer) Stream(grpc.BidiStreamingServer[StreamRequest, StreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedTreeServer) OnSol(*SolRequest, grpc.ServerStreamingServer[SolResponse]) error {
	return status.Errorf(codes.Unimplemented, "method OnSol not implemented")
}
func (UnimplementedTreeServer) OnToken(*TokenRequest, grpc.ServerStreamingServer[TokenResponse]) error {
	return status.Errorf(codes.Unimplemented, "method OnToken not implemented")
}
func (UnimplementedTreeServer) OnSlot(*SlotRequest, grpc.ServerStreamingServer[SlotResponse]) error {
	return status.Errorf(codes.Unimplemented, "method OnSlot not implemented")
}
func (UnimplementedTreeServer) mustEmbedUnimplementedTreeServer() {}
func (UnimplementedTreeServer) testEmbeddedByValue()              {}

// UnsafeTreeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TreeServer will
// result in compilation errors.
type UnsafeTreeServer interface {
	mustEmbedUnimplementedTreeServer()
}

func RegisterTreeServer(s grpc.ServiceRegistrar, srv TreeServer) {
	// If the following call pancis, it indicates UnimplementedTreeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Tree_ServiceDesc, srv)
}

func _Tree_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tree_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeServer).Get(ctx, req.(*SingleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tree_GetTreeByPubkey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeServer).GetTreeByPubkey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tree_GetTreeByPubkey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeServer).GetTreeByPubkey(ctx, req.(*TreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tree_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TreeServer).Stream(&grpc.GenericServerStream[StreamRequest, StreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Tree_StreamServer = grpc.BidiStreamingServer[StreamRequest, StreamResponse]

func _Tree_OnSol_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SolRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TreeServer).OnSol(m, &grpc.GenericServerStream[SolRequest, SolResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Tree_OnSolServer = grpc.ServerStreamingServer[SolResponse]

func _Tree_OnToken_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TokenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TreeServer).OnToken(m, &grpc.GenericServerStream[TokenRequest, TokenResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Tree_OnTokenServer = grpc.ServerStreamingServer[TokenResponse]

func _Tree_OnSlot_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SlotRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TreeServer).OnSlot(m, &grpc.GenericServerStream[SlotRequest, SlotResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Tree_OnSlotServer = grpc.ServerStreamingServer[SlotResponse]

// Tree_ServiceDesc is the grpc.ServiceDesc for Tree service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tree_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "catscope.Tree",
	HandlerType: (*TreeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Tree_Get_Handler,
		},
		{
			MethodName: "GetTreeByPubkey",
			Handler:    _Tree_GetTreeByPubkey_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Tree_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "OnSol",
			Handler:       _Tree_OnSol_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "OnToken",
			Handler:       _Tree_OnToken_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "OnSlot",
			Handler:       _Tree_OnSlot_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "catscope.proto",
}
