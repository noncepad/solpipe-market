// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.21.12
// source: catscope.proto

package catscope

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_catscope_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_catscope_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_catscope_proto_rawDescGZIP(), []int{0}
}

type GetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ListId        []*AccountId           `protobuf:"bytes,1,rep,name=list_id,json=listId,proto3" json:"list_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	mi := &file_catscope_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_catscope_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_catscope_proto_rawDescGZIP(), []int{1}
}

func (x *GetRequest) GetListId() []*AccountId {
	if x != nil {
		return x.ListId
	}
	return nil
}

type GetResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ListAccount   []*Account             `protobuf:"bytes,1,rep,name=list_account,json=listAccount,proto3" json:"list_account,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetResponse) Reset() {
	*x = GetResponse{}
	mi := &file_catscope_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResponse) ProtoMessage() {}

func (x *GetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_catscope_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResponse.ProtoReflect.Descriptor instead.
func (*GetResponse) Descriptor() ([]byte, []int) {
	return file_catscope_proto_rawDescGZIP(), []int{2}
}

func (x *GetResponse) GetListAccount() []*Account {
	if x != nil {
		return x.ListAccount
	}
	return nil
}

type AccountId struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Id:
	//
	//	*AccountId_NodeId
	//	*AccountId_Pubkey
	Id            isAccountId_Id `protobuf_oneof:"id"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccountId) Reset() {
	*x = AccountId{}
	mi := &file_catscope_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountId) ProtoMessage() {}

func (x *AccountId) ProtoReflect() protoreflect.Message {
	mi := &file_catscope_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountId.ProtoReflect.Descriptor instead.
func (*AccountId) Descriptor() ([]byte, []int) {
	return file_catscope_proto_rawDescGZIP(), []int{3}
}

func (x *AccountId) GetId() isAccountId_Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AccountId) GetNodeId() uint64 {
	if x != nil {
		if x, ok := x.Id.(*AccountId_NodeId); ok {
			return x.NodeId
		}
	}
	return 0
}

func (x *AccountId) GetPubkey() []byte {
	if x != nil {
		if x, ok := x.Id.(*AccountId_Pubkey); ok {
			return x.Pubkey
		}
	}
	return nil
}

type isAccountId_Id interface {
	isAccountId_Id()
}

type AccountId_NodeId struct {
	NodeId uint64 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3,oneof"`
}

type AccountId_Pubkey struct {
	Pubkey []byte `protobuf:"bytes,2,opt,name=pubkey,proto3,oneof"`
}

func (*AccountId_NodeId) isAccountId_Id() {}

func (*AccountId_Pubkey) isAccountId_Id() {}

type Account struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Header         []byte                 `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data           []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	ListEdgeAdd    []*Edge                `protobuf:"bytes,3,rep,name=list_edge_add,json=listEdgeAdd,proto3" json:"list_edge_add,omitempty"`
	ListEdgeDelete []*Edge                `protobuf:"bytes,4,rep,name=list_edge_delete,json=listEdgeDelete,proto3" json:"list_edge_delete,omitempty"`
	ListEdgeKeep   []*Edge                `protobuf:"bytes,5,rep,name=list_edge_keep,json=listEdgeKeep,proto3" json:"list_edge_keep,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Account) Reset() {
	*x = Account{}
	mi := &file_catscope_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_catscope_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_catscope_proto_rawDescGZIP(), []int{4}
}

func (x *Account) GetHeader() []byte {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Account) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Account) GetListEdgeAdd() []*Edge {
	if x != nil {
		return x.ListEdgeAdd
	}
	return nil
}

func (x *Account) GetListEdgeDelete() []*Edge {
	if x != nil {
		return x.ListEdgeDelete
	}
	return nil
}

func (x *Account) GetListEdgeKeep() []*Edge {
	if x != nil {
		return x.ListEdgeKeep
	}
	return nil
}

type SubscriptionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Request:
	//
	//	*SubscriptionRequest_Subscription
	//	*SubscriptionRequest_Cancel
	Request       isSubscriptionRequest_Request `protobuf_oneof:"request"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscriptionRequest) Reset() {
	*x = SubscriptionRequest{}
	mi := &file_catscope_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionRequest) ProtoMessage() {}

func (x *SubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_catscope_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionRequest.ProtoReflect.Descriptor instead.
func (*SubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_catscope_proto_rawDescGZIP(), []int{5}
}

func (x *SubscriptionRequest) GetRequest() isSubscriptionRequest_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *SubscriptionRequest) GetSubscription() *Subscription {
	if x != nil {
		if x, ok := x.Request.(*SubscriptionRequest_Subscription); ok {
			return x.Subscription
		}
	}
	return nil
}

func (x *SubscriptionRequest) GetCancel() uint32 {
	if x != nil {
		if x, ok := x.Request.(*SubscriptionRequest_Cancel); ok {
			return x.Cancel
		}
	}
	return 0
}

type isSubscriptionRequest_Request interface {
	isSubscriptionRequest_Request()
}

type SubscriptionRequest_Subscription struct {
	Subscription *Subscription `protobuf:"bytes,1,opt,name=subscription,proto3,oneof"`
}

type SubscriptionRequest_Cancel struct {
	Cancel uint32 `protobuf:"varint,2,opt,name=cancel,proto3,oneof"`
}

func (*SubscriptionRequest_Subscription) isSubscriptionRequest_Request() {}

func (*SubscriptionRequest_Cancel) isSubscriptionRequest_Request() {}

type Subscription struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Root          *AccountId             `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"`
	FilterWeight  uint32                 `protobuf:"varint,3,opt,name=filter_weight,json=filterWeight,proto3" json:"filter_weight,omitempty"`
	Depth         uint32                 `protobuf:"varint,4,opt,name=depth,proto3" json:"depth,omitempty"`
	LastSlot      uint64                 `protobuf:"varint,5,opt,name=last_slot,json=lastSlot,proto3" json:"last_slot,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Subscription) Reset() {
	*x = Subscription{}
	mi := &file_catscope_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription) ProtoMessage() {}

func (x *Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_catscope_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription.ProtoReflect.Descriptor instead.
func (*Subscription) Descriptor() ([]byte, []int) {
	return file_catscope_proto_rawDescGZIP(), []int{6}
}

func (x *Subscription) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Subscription) GetRoot() *AccountId {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *Subscription) GetFilterWeight() uint32 {
	if x != nil {
		return x.FilterWeight
	}
	return 0
}

func (x *Subscription) GetDepth() uint32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *Subscription) GetLastSlot() uint64 {
	if x != nil {
		return x.LastSlot
	}
	return 0
}

type SubscriptionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*SubscriptionResponse_AckSubscription
	//	*SubscriptionResponse_Commit
	Response      isSubscriptionResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscriptionResponse) Reset() {
	*x = SubscriptionResponse{}
	mi := &file_catscope_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionResponse) ProtoMessage() {}

func (x *SubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_catscope_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionResponse.ProtoReflect.Descriptor instead.
func (*SubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_catscope_proto_rawDescGZIP(), []int{7}
}

func (x *SubscriptionResponse) GetResponse() isSubscriptionResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *SubscriptionResponse) GetAckSubscription() uint32 {
	if x != nil {
		if x, ok := x.Response.(*SubscriptionResponse_AckSubscription); ok {
			return x.AckSubscription
		}
	}
	return 0
}

func (x *SubscriptionResponse) GetCommit() *Commit {
	if x != nil {
		if x, ok := x.Response.(*SubscriptionResponse_Commit); ok {
			return x.Commit
		}
	}
	return nil
}

type isSubscriptionResponse_Response interface {
	isSubscriptionResponse_Response()
}

type SubscriptionResponse_AckSubscription struct {
	AckSubscription uint32 `protobuf:"varint,1,opt,name=ack_subscription,json=ackSubscription,proto3,oneof"`
}

type SubscriptionResponse_Commit struct {
	Commit *Commit `protobuf:"bytes,2,opt,name=commit,proto3,oneof"`
}

func (*SubscriptionResponse_AckSubscription) isSubscriptionResponse_Response() {}

func (*SubscriptionResponse_Commit) isSubscriptionResponse_Response() {}

type ChainUpdate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Update:
	//
	//	*ChainUpdate_Slot
	//	*ChainUpdate_Blockhash
	Update        isChainUpdate_Update `protobuf_oneof:"update"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChainUpdate) Reset() {
	*x = ChainUpdate{}
	mi := &file_catscope_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChainUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainUpdate) ProtoMessage() {}

func (x *ChainUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_catscope_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainUpdate.ProtoReflect.Descriptor instead.
func (*ChainUpdate) Descriptor() ([]byte, []int) {
	return file_catscope_proto_rawDescGZIP(), []int{8}
}

func (x *ChainUpdate) GetUpdate() isChainUpdate_Update {
	if x != nil {
		return x.Update
	}
	return nil
}

func (x *ChainUpdate) GetSlot() *Slot {
	if x != nil {
		if x, ok := x.Update.(*ChainUpdate_Slot); ok {
			return x.Slot
		}
	}
	return nil
}

func (x *ChainUpdate) GetBlockhash() []byte {
	if x != nil {
		if x, ok := x.Update.(*ChainUpdate_Blockhash); ok {
			return x.Blockhash
		}
	}
	return nil
}

type isChainUpdate_Update interface {
	isChainUpdate_Update()
}

type ChainUpdate_Slot struct {
	Slot *Slot `protobuf:"bytes,1,opt,name=slot,proto3,oneof"`
}

type ChainUpdate_Blockhash struct {
	Blockhash []byte `protobuf:"bytes,2,opt,name=blockhash,proto3,oneof"`
}

func (*ChainUpdate_Slot) isChainUpdate_Update() {}

func (*ChainUpdate_Blockhash) isChainUpdate_Update() {}

type Slot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Slot          uint64                 `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	Status        uint32                 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Slot) Reset() {
	*x = Slot{}
	mi := &file_catscope_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Slot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slot) ProtoMessage() {}

func (x *Slot) ProtoReflect() protoreflect.Message {
	mi := &file_catscope_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slot.ProtoReflect.Descriptor instead.
func (*Slot) Descriptor() ([]byte, []int) {
	return file_catscope_proto_rawDescGZIP(), []int{9}
}

func (x *Slot) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *Slot) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type Edge struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	From          uint64                 `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	To            uint64                 `protobuf:"varint,2,opt,name=to,proto3" json:"to,omitempty"`
	Weight        uint32                 `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Edge) Reset() {
	*x = Edge{}
	mi := &file_catscope_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Edge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Edge) ProtoMessage() {}

func (x *Edge) ProtoReflect() protoreflect.Message {
	mi := &file_catscope_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Edge.ProtoReflect.Descriptor instead.
func (*Edge) Descriptor() ([]byte, []int) {
	return file_catscope_proto_rawDescGZIP(), []int{10}
}

func (x *Edge) GetFrom() uint64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *Edge) GetTo() uint64 {
	if x != nil {
		return x.To
	}
	return 0
}

func (x *Edge) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type Commit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Slot          uint64                 `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	ListAccount   []*Account             `protobuf:"bytes,2,rep,name=list_account,json=listAccount,proto3" json:"list_account,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Commit) Reset() {
	*x = Commit{}
	mi := &file_catscope_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Commit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commit) ProtoMessage() {}

func (x *Commit) ProtoReflect() protoreflect.Message {
	mi := &file_catscope_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commit.ProtoReflect.Descriptor instead.
func (*Commit) Descriptor() ([]byte, []int) {
	return file_catscope_proto_rawDescGZIP(), []int{11}
}

func (x *Commit) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *Commit) GetListAccount() []*Account {
	if x != nil {
		return x.ListAccount
	}
	return nil
}

type RentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Size          uint64                 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RentRequest) Reset() {
	*x = RentRequest{}
	mi := &file_catscope_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RentRequest) ProtoMessage() {}

func (x *RentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_catscope_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RentRequest.ProtoReflect.Descriptor instead.
func (*RentRequest) Descriptor() ([]byte, []int) {
	return file_catscope_proto_rawDescGZIP(), []int{12}
}

func (x *RentRequest) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type RentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Lamports      uint64                 `protobuf:"varint,1,opt,name=lamports,proto3" json:"lamports,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RentResponse) Reset() {
	*x = RentResponse{}
	mi := &file_catscope_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RentResponse) ProtoMessage() {}

func (x *RentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_catscope_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RentResponse.ProtoReflect.Descriptor instead.
func (*RentResponse) Descriptor() ([]byte, []int) {
	return file_catscope_proto_rawDescGZIP(), []int{13}
}

func (x *RentResponse) GetLamports() uint64 {
	if x != nil {
		return x.Lamports
	}
	return 0
}

var File_catscope_proto protoreflect.FileDescriptor

var file_catscope_proto_rawDesc = string([]byte{
	0x0a, 0x0e, 0x63, 0x61, 0x74, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0d, 0x63, 0x61, 0x74, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3f, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x61, 0x74, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x52, 0x06, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x61, 0x74, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x46, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x06, 0x70,
	0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x70,
	0x75, 0x62, 0x6b, 0x65, 0x79, 0x42, 0x04, 0x0a, 0x02, 0x69, 0x64, 0x22, 0xe8, 0x01, 0x0a, 0x07,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x65, 0x64, 0x67, 0x65,
	0x5f, 0x61, 0x64, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x61, 0x74,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52,
	0x0b, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x64, 0x67, 0x65, 0x41, 0x64, 0x64, 0x12, 0x3d, 0x0a, 0x10,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x61, 0x74, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x0e, 0x6c, 0x69, 0x73,
	0x74, 0x45, 0x64, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0e, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x61, 0x74, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x64,
	0x67, 0x65, 0x4b, 0x65, 0x65, 0x70, 0x22, 0x7d, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a,
	0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x61, 0x74, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xa4, 0x01, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x61, 0x74, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x04,
	0x72, 0x6f, 0x6f, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70,
	0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12,
	0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x22, 0x80, 0x01, 0x0a,
	0x14, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x10, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x0f, 0x61, 0x63, 0x6b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x61, 0x74, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x62, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x29,
	0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x61, 0x74, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6c, 0x6f,
	0x74, 0x48, 0x00, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x1e, 0x0a, 0x09, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x09,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x61, 0x73, 0x68, 0x42, 0x08, 0x0a, 0x06, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x22, 0x32, 0x0a, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x42, 0x0a, 0x04, 0x45, 0x64, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x74, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x57, 0x0a, 0x06, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x39, 0x0a, 0x0c, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x61, 0x74, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x21, 0x0a, 0x0b, 0x52, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x2a, 0x0a, 0x0c, 0x52, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x61, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x32, 0xa6, 0x02, 0x0a, 0x05, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x3c, 0x0a,
	0x03, 0x47, 0x65, 0x74, 0x12, 0x19, 0x2e, 0x63, 0x61, 0x74, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x63, 0x61, 0x74, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x09, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x22, 0x2e, 0x63, 0x61, 0x74, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63,
	0x61, 0x74, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x3b, 0x0a, 0x05, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x14,
	0x2e, 0x63, 0x61, 0x74, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x63, 0x61, 0x74, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x30, 0x01, 0x12, 0x48, 0x0a, 0x0d, 0x52, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x65, 0x6d, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x63, 0x61, 0x74, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x63, 0x61, 0x74, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x52, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x36, 0x5a, 0x34,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x61, 0x64, 0x2f, 0x73, 0x6f, 0x6c, 0x70, 0x69, 0x70, 0x65, 0x2d, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x61, 0x74, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_catscope_proto_rawDescOnce sync.Once
	file_catscope_proto_rawDescData []byte
)

func file_catscope_proto_rawDescGZIP() []byte {
	file_catscope_proto_rawDescOnce.Do(func() {
		file_catscope_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_catscope_proto_rawDesc), len(file_catscope_proto_rawDesc)))
	})
	return file_catscope_proto_rawDescData
}

var file_catscope_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_catscope_proto_goTypes = []any{
	(*Empty)(nil),                // 0: catscopestate.Empty
	(*GetRequest)(nil),           // 1: catscopestate.GetRequest
	(*GetResponse)(nil),          // 2: catscopestate.GetResponse
	(*AccountId)(nil),            // 3: catscopestate.AccountId
	(*Account)(nil),              // 4: catscopestate.Account
	(*SubscriptionRequest)(nil),  // 5: catscopestate.SubscriptionRequest
	(*Subscription)(nil),         // 6: catscopestate.Subscription
	(*SubscriptionResponse)(nil), // 7: catscopestate.SubscriptionResponse
	(*ChainUpdate)(nil),          // 8: catscopestate.ChainUpdate
	(*Slot)(nil),                 // 9: catscopestate.Slot
	(*Edge)(nil),                 // 10: catscopestate.Edge
	(*Commit)(nil),               // 11: catscopestate.Commit
	(*RentRequest)(nil),          // 12: catscopestate.RentRequest
	(*RentResponse)(nil),         // 13: catscopestate.RentResponse
}
var file_catscope_proto_depIdxs = []int32{
	3,  // 0: catscopestate.GetRequest.list_id:type_name -> catscopestate.AccountId
	4,  // 1: catscopestate.GetResponse.list_account:type_name -> catscopestate.Account
	10, // 2: catscopestate.Account.list_edge_add:type_name -> catscopestate.Edge
	10, // 3: catscopestate.Account.list_edge_delete:type_name -> catscopestate.Edge
	10, // 4: catscopestate.Account.list_edge_keep:type_name -> catscopestate.Edge
	6,  // 5: catscopestate.SubscriptionRequest.subscription:type_name -> catscopestate.Subscription
	3,  // 6: catscopestate.Subscription.root:type_name -> catscopestate.AccountId
	11, // 7: catscopestate.SubscriptionResponse.commit:type_name -> catscopestate.Commit
	9,  // 8: catscopestate.ChainUpdate.slot:type_name -> catscopestate.Slot
	4,  // 9: catscopestate.Commit.list_account:type_name -> catscopestate.Account
	1,  // 10: catscopestate.Graph.Get:input_type -> catscopestate.GetRequest
	5,  // 11: catscopestate.Graph.Subscribe:input_type -> catscopestate.SubscriptionRequest
	0,  // 12: catscopestate.Graph.Chain:input_type -> catscopestate.Empty
	12, // 13: catscopestate.Graph.RentExemption:input_type -> catscopestate.RentRequest
	2,  // 14: catscopestate.Graph.Get:output_type -> catscopestate.GetResponse
	7,  // 15: catscopestate.Graph.Subscribe:output_type -> catscopestate.SubscriptionResponse
	8,  // 16: catscopestate.Graph.Chain:output_type -> catscopestate.ChainUpdate
	13, // 17: catscopestate.Graph.RentExemption:output_type -> catscopestate.RentResponse
	14, // [14:18] is the sub-list for method output_type
	10, // [10:14] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_catscope_proto_init() }
func file_catscope_proto_init() {
	if File_catscope_proto != nil {
		return
	}
	file_catscope_proto_msgTypes[3].OneofWrappers = []any{
		(*AccountId_NodeId)(nil),
		(*AccountId_Pubkey)(nil),
	}
	file_catscope_proto_msgTypes[5].OneofWrappers = []any{
		(*SubscriptionRequest_Subscription)(nil),
		(*SubscriptionRequest_Cancel)(nil),
	}
	file_catscope_proto_msgTypes[7].OneofWrappers = []any{
		(*SubscriptionResponse_AckSubscription)(nil),
		(*SubscriptionResponse_Commit)(nil),
	}
	file_catscope_proto_msgTypes[8].OneofWrappers = []any{
		(*ChainUpdate_Slot)(nil),
		(*ChainUpdate_Blockhash)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_catscope_proto_rawDesc), len(file_catscope_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_catscope_proto_goTypes,
		DependencyIndexes: file_catscope_proto_depIdxs,
		MessageInfos:      file_catscope_proto_msgTypes,
	}.Build()
	File_catscope_proto = out.File
	file_catscope_proto_goTypes = nil
	file_catscope_proto_depIdxs = nil
}
